// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  questions Question[]

  role     UserRole  @default(STUDENT)
  answers  Answers[]
  comments Comment[]

  @@map("users")
}

model Question {
  id        String    @id @default(uuid())
  title     String
  slug      String    @unique
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  authorId  String    @map("author_id")

  bestAnswerId String? @unique @map("best_answer_id")

  author     User     @relation(fields: [authorId], references: [id])
  bestAnswer Answers? @relation("bestAnswer", fields: [bestAnswerId], references: [id])

  answers    Answers[]
  comments   Comment[]
  Attachment Attachment[]

  @@map("questions")
}

model Answers {
  id String @id @default(uuid())

  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  author     User      @relation(fields: [authorId], references: [id])
  questionId String    @map("question_id")

  bestAnswerOn Question?    @relation("bestAnswer")
  questions    Question     @relation(fields: [questionId], references: [id])
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id      String @id @default(uuid())
  content String

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")

  author User @relation(fields: [authorId], references: [id])

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answers?  @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answers?  @relation(fields: [answerId], references: [id])

  @@map("attachments")
}
